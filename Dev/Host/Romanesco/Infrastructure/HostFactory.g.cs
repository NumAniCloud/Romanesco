// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using Romanesco.Extensibility;
using Romanesco.Startup;
using Romanesco.Common.Model.Reflections;
using Romanesco.Model;
using Romanesco.Common.Model.Basics;
using Deptorygen.GenericHost;
using Microsoft.Extensions.DependencyInjection;
using Romanesco.Model.Infrastructure;

namespace Romanesco.Infrastructure
{
	internal partial class HostFactory : IHostFactory
		, IDisposable
		, IDeptorygenFactory
	{
		private MainWindow? _ResolveMainWindowCache;
		private DataAssemblyRepository? _ResolveDataAssemblyRepositoryCache;
		private CommandHistory? _ResolveCommandHistoryCache;

		public HostFactory()
		{
		}

		public PluginLoader ResolvePluginLoaderAsTransient()
		{
			return new PluginLoader();
		}

		public MainWindow ResolveMainWindow()
		{
			return _ResolveMainWindowCache ??= new MainWindow();
		}

		public IDataAssemblyRepository ResolveDataAssemblyRepository()
		{
			return _ResolveDataAssemblyRepositoryCache ??= new DataAssemblyRepository();
		}

		public CommandHistory ResolveCommandHistory()
		{
			return _ResolveCommandHistoryCache ??= new CommandHistory();
		}

		public void ConfigureServices(IServiceCollection services)
		{
			services.AddTransient<HostFactory>(provider => this);
			services.AddTransient<PluginLoader>(provider => ResolvePluginLoaderAsTransient());
			services.AddTransient<MainWindow>(provider => ResolveMainWindow());
			services.AddTransient<IDataAssemblyRepository>(provider => ResolveDataAssemblyRepository());
			services.AddTransient<CommandHistory>(provider => ResolveCommandHistory());
		}

		public void Dispose()
		{
		}
	}
}