// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using Romanesco.Model;
using Romanesco.Model.States;
using Romanesco.Model.Services.Load;
using Romanesco.Model.Services.History;
using Romanesco.Model.Services.Save;
using Romanesco.Common.Model.ProjectComponent;
using Romanesco.Model.Commands;
using Romanesco.Model.Services.Serialize;
using Romanesco.Model.ProjectComponents;
using Romanesco.Common.Model.Interfaces;

namespace Romanesco.Model.Infrastructure
{
	internal partial class ModelFactory : IModelFactory
		, IDisposable
	{
		private readonly ILoadingStateProvider _iLoadingStateProvider;

		public IModelRequirementFactory Requirement { get; }
		public IPluginFactory Plugin { get; }

		private Editor? _ResolveEditorCache;
		private EditorStateChanger? _ResolveEditorStateChangerCache;
		private EmptyEditorState? _ResolveEditorStateCache;
		private WindowsLoadService? _ResolveProjectLoadServiceCache;
		private SimpleHistoryService? _ResolveProjectHistoryServiceCache;
		private ProjectSaveServiceFactory? _ResolveProjectSaveServiceFactoryCache;
		private CommandContext? _ResolveCommandContextCache;
		private NewtonsoftStateSerializer? _ResolveStateSerializerCache;
		private NewtonsoftStateDeserializer? _ResolveStateDeserializerCache;
		private ObjectInterpreter? _ResolveObjectInterpreterCache;
		private ObjectInterpreter? _ResolveIObjectInterpreterCache;
		private ProjectSwitcher? _ResolveProjectSwitcherCache;

		public ModelFactory(ILoadingStateProvider iLoadingStateProvider, IModelRequirementFactory requirement, IPluginFactory plugin)
		{
			_iLoadingStateProvider = iLoadingStateProvider;
			Requirement = requirement;
			Plugin = plugin;
		}

		public Editor ResolveEditor()
		{
			return _ResolveEditorCache ??= new Editor(ResolveProjectSwitcher(), ResolveEditorStateChanger(), ResolveCommandContext());
		}

		public IEditorStateChanger ResolveEditorStateChanger()
		{
			return _ResolveEditorStateChangerCache ??= new EditorStateChanger(this);
		}

		public IEditorState ResolveEditorState()
		{
			return _ResolveEditorStateCache ??= new EmptyEditorState(ResolveProjectLoadService());
		}

		public EmptyEditorState ResolveEmptyEditorStateAsTransient()
		{
			return new EmptyEditorState(ResolveProjectLoadService());
		}

		public IProjectLoadService ResolveProjectLoadService()
		{
			return _ResolveProjectLoadServiceCache ??= new WindowsLoadService(Requirement.ResolveProjectSettingProvider(), ResolveStateDeserializer(), Requirement.ResolveDataAssemblyRepository(), this, ResolveProjectSwitcher(), ResolveObjectInterpreter(), _iLoadingStateProvider);
		}

		public IProjectHistoryService ResolveProjectHistoryService()
		{
			return _ResolveProjectHistoryServiceCache ??= new SimpleHistoryService(Requirement.ResolveCommandHistory());
		}

		public ProjectSaveServiceFactory ResolveProjectSaveServiceFactory()
		{
			return _ResolveProjectSaveServiceFactoryCache ??= new ProjectSaveServiceFactory(ResolveStateSerializer());
		}

		public IProjectModelFactory ResolveProjectModelFactoryAsTransient(IProjectContext projectContext)
		{
			return new ProjectModelFactory(projectContext, this, Requirement, Plugin);
		}

		public CommandContext ResolveCommandContext()
		{
			return _ResolveCommandContextCache ??= new CommandContext(ResolveProjectSwitcher(), ResolveEditorStateChanger(), this);
		}

		public IEditorFacade ResolveEditorFacade()
		{
			return ResolveEditor();
		}

		public IStateSerializer ResolveStateSerializer()
		{
			return _ResolveStateSerializerCache ??= new NewtonsoftStateSerializer();
		}

		public IStateDeserializer ResolveStateDeserializer()
		{
			return _ResolveStateDeserializerCache ??= new NewtonsoftStateDeserializer();
		}

		public ProjectSettingsEditor ResolveProjectSettingsEditorAsTransient()
		{
			return new ProjectSettingsEditor(Requirement.ResolveDataAssemblyRepository());
		}

		public ObjectInterpreter ResolveObjectInterpreter()
		{
			return _ResolveObjectInterpreterCache ??= new ObjectInterpreter(Plugin.ResolveStateFactories());
		}

		public IObjectInterpreter ResolveIObjectInterpreter()
		{
			return _ResolveIObjectInterpreterCache ??= new ObjectInterpreter(Plugin.ResolveStateFactories());
		}

		public IProjectSwitcher ResolveProjectSwitcher()
		{
			return _ResolveProjectSwitcherCache ??= new ProjectSwitcher();
		}

		public void Dispose()
		{
			_ResolveEditorCache?.Dispose();
		}
	}
}