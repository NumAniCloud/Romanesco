// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using Romanesco.View.States;
using Romanesco.View.Entry;

namespace Romanesco.View.Infrastructure
{
	internal partial class ViewFactory : IViewFactory
		, IDisposable
	{
		public IViewRequirementFactory Requirement { get; }
		public IPluginFactory Plugin { get; }

		private ViewInterpreter? _ResolveViewInterpreterCache;
		private MainDataContext? _ResolveEditorViewContextCache;

		public ViewFactory(IViewRequirementFactory requirement, IPluginFactory plugin)
		{
			Requirement = requirement;
			Plugin = plugin;
		}

		public ViewInterpreter ResolveViewInterpreter()
		{
			return _ResolveViewInterpreterCache ??= new ViewInterpreter(Plugin.ResolveViewFactories());
		}

		public IEditorViewContext ResolveEditorViewContext()
		{
			return _ResolveEditorViewContextCache ??= new MainDataContext(Requirement.ResolveEditorViewModel(), ResolveViewInterpreter());
		}

		public void Dispose()
		{
		}
	}
}